import mongoose from 'mongoose';
import { isVercel } from './environmentHelper.js';

// Opciones por defecto para la conexi√≥n de MongoDB
const MONGODB_OPTIONS = {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  // No definimos serverSelectionTimeoutMS a nivel global para permitir la configuraci√≥n por entorno
};

// Clase para gestionar la conexi√≥n a MongoDB
class MongoConnector {
  constructor() {
    this.isConnecting = false;
    this.connectionAttempts = 0;
    this.maxConnectionAttempts = 5;
    this.retryDelay = 3000;
    this.vercelEnvironment = isVercel() || process.cwd().includes('/var/task');
    
    // En Vercel, usamos un tiempo de espera m√°s corto para la selecci√≥n del servidor
    this.serverSelectionTimeout = this.vercelEnvironment ? 5000 : 30000;
  }
  
  // Conectar a MongoDB con reintento autom√°tico
  async connect(uri) {
    // Si ya estamos en proceso de conexi√≥n, salir
    if (this.isConnecting) return;
    
    this.isConnecting = true;
    this.connectionAttempts++;
    
    try {
      console.log(`Intentando conectar a MongoDB (intento ${this.connectionAttempts}/${this.maxConnectionAttempts})`);
      
      // Conectar con opciones espec√≠ficas seg√∫n el entorno
      await mongoose.connect(uri, {
        ...MONGODB_OPTIONS,
        serverSelectionTimeoutMS: this.serverSelectionTimeout
      });
      
      console.log('‚úÖ MongoDB conectado correctamente');
      this.isConnecting = false;
      this.connectionAttempts = 0;
    } catch (error) {
      this.isConnecting = false;
      
      console.error('‚ùå Error al conectar a MongoDB:', error.message);
      
      // Mostrar mensajes de ayuda espec√≠ficos seg√∫n el error
      if (error.name === 'MongooseServerSelectionError') {
        console.log('üí° Posibles causas:');
        console.log('  - La IP no est√° en la lista blanca de MongoDB Atlas');
        console.log('  - Hay un problema de red o firewall');
        console.log('  - La URI de conexi√≥n no es correcta');
        
        if (this.vercelEnvironment) {
          console.log('‚ö†Ô∏è Al ejecutarse en Vercel, debes a√±adir 0.0.0.0/0 a la lista blanca de MongoDB Atlas');
          console.log('   para permitir conexiones desde cualquier IP');
        }
      }
      
      // Reintentar si no hemos superado el m√°ximo de intentos
      if (this.connectionAttempts < this.maxConnectionAttempts) {
        console.log(`Reintentando conexi√≥n en ${this.retryDelay/1000} segundos...`);
        setTimeout(() => this.connect(uri), this.retryDelay);
      } else {
        console.error(`M√°ximo de intentos de conexi√≥n alcanzado (${this.maxConnectionAttempts}). No se pudo conectar a MongoDB.`);
        this.connectionAttempts = 0;
      }
    }
  }
  
  // M√©todo para comprobar si la conexi√≥n est√° activa
  isConnected() {
    return mongoose.connection.readyState === 1;
  }
  
  // Cerrar conexi√≥n
  async disconnect() {
    if (this.isConnected()) {
      await mongoose.disconnect();
      console.log('Desconectado de MongoDB');
    }
  }
}

export default new MongoConnector();
